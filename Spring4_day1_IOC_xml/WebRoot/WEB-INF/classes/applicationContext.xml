<?xml version="1.0" encoding="UTF-8"?>
<beans
 xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:p="http://www.springframework.org/schema/p"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
 					 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"> 
                         
<!-- 
		视频中是这段约束，但使用这个约束constructor-arg中不能使用name属性
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
			       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			       xsi:schemaLocation=" http://www.springframework.org/schema/beans 
			        				    http://www.springframework.org/schema/beans/spring-beans.xsd"> 
-->

<!-- Spring入门配置============================ -->
	<!--
		bean标签中还有个name属性  
		id:   使用了约束中的唯一约束。
		           里面不能出现特殊字符
		name:没有使用约束中的唯一约束(理论上可以出现重复的，但实际开发中不能出现)。
		          里面可以出现特殊字符。
	-->	
	<bean id="UserService" class="demo01.UserServiceImpl">
		<property name="name" value="张三"/>	
	</bean>

<!-- Spring生命周期配置======================== -->
	<bean id="CustomerDao"  class="demo02.CustomerDaoImpl" init-method="init" destroy-method="destory" scope=""></bean>

<!-- Spring的Bean的实例化的方式================ -->
	<!-- 无参数构造方法 -->
	<bean id="bean1" class="demo03.Bean1"></bean>
	
	<!-- 静态工厂实例化 -->
	<bean id="bean2" class="demo03.Bean2Factory" factory-method="createBean2"/>
	
	<!-- 实例工厂实例化 -->
	<bean id="bean3Factory" class="demo03.Bean3Factory"></bean>
	<bean id="bean3"  factory-bean="bean3Factory" factory-method="createBean3"></bean>

<!-- Spring属性注入=============================-->
	<!-- 构造方法方式 -->
	<bean id="Car1" class="demo04.Car1">
		<constructor-arg name="name" value="宝马"></constructor-arg>
		<constructor-arg name="price" value="800000"></constructor-arg>
	</bean>
	
	<!-- set方法方式设置普通属性 -->
	<!--  
		<bean id="Car2" class="demo04.Car2">
			<property name="name" value="奔驰"></property>
			<property name="price" value="1000000"></property>
		</bean>
	-->
	<!-- 使用P名称空间，与使用“set方法方式设置普通属性”一样 -->	
	<!-- 
		<bean id="Car2" class="demo04.Car2" p:name="法拉利" p:price="1000000">
		</bean>
	 -->
	 <!-- 使用SpEL -->
	 <bean id="Car2" class="demo04.Car2">
		<property name="name" value="#{'奥迪'}"></property>
		<property name="price" value="#{500000}"></property>
	</bean>
	
	
	<!-- set方法方式设置对象类型(value设置普通类型的值，ref设置其他的类的id或name，比如这里的Car2就是上面的id) -->
	<!--  
		<bean id="Person" class="demo04.Person">
			<property name="name" value="张三"></property>
			<property name="car2" ref="Car2"></property>
		</bean>
	-->
	<!-- 使用P名称空间，与使用“set方法方式设置对象类型”一样 -->	
	<!-- 
		<bean id="Person" class="demo04.Person" p:name="李四" p:car2-ref="Car2">
		</bean> 
	-->
	<!-- 使用SpEL -->
	 <bean id="Person" class="demo04.Person">
		<property name="name" value="#{'王如花'}"></property>
		<property name="car2" value="#{Car2}"></property>
	</bean>
	
	<!-- 集合属性注入============================= -->
	<!-- 注入数组属性 -->
	<bean id="CollectionBean" class="demo05.CollectionBean">
		<property name="strs">
			<list>
				<value>西虹市</value>
				<value>爱琴海</value>
				<value>维也纳</value>
			</list>
		</property>
		
		<property name="list">
			<list>
				<value>北京市</value>
				<value>上海市</value>
				<value>休斯顿</value>
			</list>
		</property>
		
		<property name="set">
			<set>
				<value>旧金山</value>
				<value>重庆市</value>
				<value>深圳市</value>
			</set>
		</property>
		
		<property name="map">
			<map>
				<entry key="德国" value="不莱梅"/>
				<entry key="英国" value="英格兰"/>
				<entry key="美国" value="华盛顿"/>
			</map>
		</property>
	</bean>
	
</beans>